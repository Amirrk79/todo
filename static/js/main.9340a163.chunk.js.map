{"version":3,"sources":["Component/Header.js","Redux/Actions/updateTaskAction.js","Redux/Actions/actions.js","Redux/Reducers/TaskReducer.js","Redux/Reducers/combined.js","Redux/Store.js","Redux/Actions/addTaskAction.js","Component/Taskbar.js","Redux/Actions/deleteTaskAction.js","Redux/Actions/setCompleted.js","Component/taskItem.js","Component/TaskList.js","App.js","index.js"],"names":["Header","Component","updateTask","task","type","payload","tasks","tasksReducer","state","action","newStates","newState","filter","id","updatedState","index","i","length","completedState","AllReducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","AddTask","connect","dispatch","useDispatch","useState","name","setName","class","value","onChange","e","target","onClick","shortid","generate","isCompleted","deleteTask","taskid","setCompleted","TaskItem","editable","setEditable","newName","setNewName","Completed","setIsCompleted","handleComplete","TaskList","useSelector","map","App","ReactDOM","render","MyStore","document","getElementById"],"mappings":"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","file":"static/js/main.9340a163.chunk.js","sourcesContent":["import React , { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Todo App</h1>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nexport default Header;","\r\nimport { UPDATE_TASK } from './actions';\r\n\r\n\r\nconst updateTask = (task) => {\r\n    return {\r\n        type: UPDATE_TASK , \r\n        payload: task \r\n    }\r\n};\r\n\r\nexport default updateTask;","export const ADD_TASK = \"ADD_TASK\";\r\n\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\n\r\nexport const UPDATE_TASK = \"UPDATE_TASK\";\r\n\r\nexport const SET_COMPLETED = \"SET_COMPLETED\";","import { act } from \"react-dom/test-utils\";\r\nimport updateTask from \"../Actions/updateTaskAction\";\r\n\r\nconst tasks = [];\r\n\r\n\r\nconst tasksReducer = (state = tasks , action) => {\r\n    switch(action.type) {\r\n        case 'ADD_TASK': {\r\n            let newStates = [...state , action.payload];\r\n            return newStates;\r\n        }\r\n        case 'DELETE_TASK': {\r\n            let newState = [...state];\r\n            newState = newState.filter((task) => task.id != action.payload);\r\n            return newState;\r\n        }\r\n        case 'UPDATE_TASK': {\r\n            let updatedState = [...state];\r\n            let index = -1;\r\n            for (let i = 0; i < updatedState.length ; i++) {\r\n                index++;\r\n                if(updatedState[i].id == action.payload.id) {\r\n                    break;\r\n                }\r\n            }\r\n            if(index != -1 ) {\r\n                updatedState[index] = action.payload;\r\n                return updatedState;\r\n            }\r\n        }\r\n        case \"SET_COMPLETED\": {\r\n            let completedState = [...state];\r\n            let index = -1;\r\n            for (let i = 0; i < completedState.length; i++) {\r\n                index++;\r\n                if(completedState[i].id == action.payload.id) {\r\n                    break;\r\n                }\r\n            }\r\n            if(index != -1) {\r\n                completedState[index] = action.payload;\r\n                return completedState;\r\n            }\r\n        }\r\n        default : {\r\n            return state\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default tasksReducer;","\r\nimport { combineReducers } from 'redux';\r\nimport tasksReducer from './TaskReducer';\r\n\r\nconst AllReducers = combineReducers({\r\n    tasks : tasksReducer\r\n});\r\n\r\n\r\nexport default AllReducers;","import { createStore } from 'redux';\r\nimport AllReducers from './Reducers/combined';\r\n\r\n\r\nconst store = createStore(AllReducers , window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;\r\n","import store from '../Store';\r\nimport { ADD } from './actions';\r\nimport shortid from 'short-id';\r\n\r\n\r\n\r\nimport { ADD_TASK } from './actions';\r\n\r\nfunction AddTask(task) {\r\n    return {\r\n        type : ADD_TASK , \r\n        payload: task\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default  AddTask;","import React , { useState } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport AddTask from '../Redux/Actions/addTaskAction';\r\nimport shortid from 'short-id';\r\n\r\n\r\n\r\nfunction TaskBar() {\r\n    const dispatch = useDispatch();\r\n    /* States */\r\n    const [name , setName] = useState();\r\n    \r\n    const handleAdd = (e) => {\r\n        dispatch(AddTask(\r\n            {\r\n                id : shortid.generate() , \r\n                name : name ,\r\n                isCompleted : false\r\n            }\r\n        ));\r\n        setName('');\r\n        \r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <div>\r\n                <input\r\n                class='input-group-text'\r\n                type=\"text\"\r\n                value={name}\r\n                onChange={handleChange}\r\n                 />\r\n\r\n                <button class=\"btn btn-success\" onClick={handleAdd}>\r\n                    Add\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect() (TaskBar);","import store from '../Store';\r\nimport { DELETE_TASK } from './actions';\r\n\r\n\r\nfunction deleteTask(taskid) {\r\n    return {\r\n        type: DELETE_TASK,\r\n        payload: taskid\r\n    }\r\n};\r\n\r\n\r\nexport default deleteTask;","import { SET_COMPLETED } from './actions';\r\n\r\nfunction setCompleted(task)  {\r\n    return {\r\n    type: SET_COMPLETED , \r\n    payload : task\r\n    }\r\n};\r\n\r\nexport default setCompleted;","\r\nimport React , { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport deleteTask from '../Redux/Actions/deleteTaskAction';\r\nimport updateTask from '../Redux/Actions/updateTaskAction';\r\nimport setCompleted from '../Redux/Actions/setCompleted';\r\n\r\nfunction TaskItem({ task }) {\r\n    /*States */\r\n    let [editable , setEditable] = useState(false);\r\n    let [newName , setNewName] = useState(task.name);\r\n    let [Completed , setIsCompleted] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDelete = () => {\r\n        dispatch(deleteTask(task.id))\r\n    };\r\n\r\n    const handleEdit = () => {\r\n        setEditable(!editable);\r\n        if(editable) {\r\n            dispatch(updateTask(\r\n                {\r\n                    ...task,\r\n                    name : newName\r\n                }\r\n            ))\r\n        };\r\n    };\r\n\r\n    const handleEditChange = (e) => {\r\n        setNewName(e.target.value);\r\n    };\r\n\r\n    const handleComplete = () => {\r\n        setIsCompleted(!Completed);\r\n        dispatch(setCompleted(\r\n            {\r\n                ...task,\r\n                isCompleted: !Completed\r\n            }\r\n        ))\r\n    };\r\n\r\n\r\n    return(\r\n        <div>\r\n            {Completed ? \r\n            <div>\r\n                <h3>Completed Task: </h3> <button class='btn btn-danger' onClick={handleComplete}>Not Complete</button>\r\n                </div>\r\n                 : \r\n                <div>\r\n                    <h3>Not Completed Task: </h3><button class=\"btn btn-success\" onClick={handleComplete}>Complete</button>\r\n                    </div>}\r\n\r\n\r\n            <div>Task id: {task.id}</div>\r\n\r\n\r\n    {editable ? \r\n    <div>\r\n    <input \r\n    class='input-group-text'\r\n    type=\"text\"\r\n    value={newName}\r\n    onChange={handleEditChange}\r\n    /> </div>\r\n    :\r\n    <div>Task name: {task.name}</div>}\r\n            <div>\r\n    <button class=\"btn btn-success\" onClick={handleEdit}>{editable ? 'Save' : \"Edit\"}</button>\r\n            </div>\r\n            <div>\r\n                <button class='btn btn-danger' onClick={handleDelete}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default TaskItem;","import React , { Component } from 'react';\r\nimport shortid from 'short-id';\r\nimport  deleteTask  from '../Redux/Actions/deleteTaskAction';\r\nimport TaskItem from './taskItem';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n\r\n\r\nfunction TaskList() {\r\n    /*Store State */\r\n    const tasks = useSelector(state => state.tasks);\r\n    return(\r\n        <div>\r\n            {tasks.map(task => {\r\n                return <TaskItem key={task.id} task={task} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default TaskList;","import React from 'react';\nimport Header from './Component/Header';\nimport TaskBar from './Component/Taskbar';\nimport TaskList from './Component/TaskList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nfunction App() {\n    return (\n      <div class='d-flex flex-column align-items-center'>\n        <Header />\n        <TaskBar />\n        <TaskList />\n      </div>\n    )\n  };\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport MyStore from './Redux/Store';\n\nReactDOM.render(\n  <Provider store={MyStore}>\n    <App />\n    </Provider>\n, \n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}